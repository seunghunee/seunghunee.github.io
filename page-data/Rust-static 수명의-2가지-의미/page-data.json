{
    "componentChunkName": "component---src-templates-post-tsx",
    "path": "/Rust-static 수명의-2가지-의미",
    "result": {"data":{"markdownRemark":{"html":"<h1>Rust static 수명의 2가지 의미</h1>\n<p>static. 다른 언어에서도 종종 볼 수 있는 키워드다.\n우리말로 번역하면 \"정적인\"이란 의미로, 소프트웨어 공학에선 \"동적인\"이라는 dynamic의 반대말로 쓰이곤 한다.\n프로그래밍 언어에선 각 언어에 따라 그리고 이 키워드가 쓰이는 장소에 따라 조금씩 의미가 달라진다.\n따라서 혼동하지 않도록 주의가 필요한 키워드다.</p>\n<p>Rust에도 static이라는 키워드가 존재한다.\n여기선 이 키워드 앞에 <code class=\"language-text\">&#39;</code>가 붙는 <code class=\"language-text\">&#39;static</code> 수명에 대해 살펴본다.\n<code class=\"language-text\">&#39;static</code> 수명은 2가지 형태로 사용되며, 비슷하지만 다르기 때문에 헷갈리기 쉽다.\n제대로 이해해서 소유권에 대한 이해를 한층 높여 보자.</p>\n<h2>두 얼굴의 <code class=\"language-text\">&#39;static</code></h2>\n<p>Rust를 배우기 시작한 대부분의 사람은 다음과 같은 코드로 <code class=\"language-text\">&#39;static</code>을 처음 접하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> hello<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'static</span> <span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"안녕\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">&quot;안녕&quot;</code>이라고 하는 문자열의 슬라이스 참조로 변수 <code class=\"language-text\">hello</code>를 초기화하고 동시에 선언하고 있다.\n여기서 <code class=\"language-text\">&#39;static</code>은 참조의 <em>수명</em>(<em>lifetime</em>)으로,\n\"이 참조는 <strong>프로그램이 끝날 때까지 언제나 유효하다</strong>\"라는 것을 나타낸다.\n실제로 위 코드를 컴파일하면, 컴파일된 이진 파일에 <code class=\"language-text\">&quot;안녕&quot;</code>이라는 문자열 리터럴이 특정 영역에 기록된다.</p>\n<p>그리고 두 번째,</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">say</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>조금 전과 조금 다르다.\n그래도 <code class=\"language-text\">&#39;static</code>이 쓰였으니 조금 전과 비슷하게 매개변수 <code class=\"language-text\">x</code>에는 \"프로그램이 끝날 때까지 유효한\" 것만 대입할 수 있을 것 같다.\n실제 수명이 <code class=\"language-text\">&#39;static</code>보다 짧은 참조를 대입해보면</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> one <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>one<span class=\"token punctuation\">)</span> <span class=\"token comment\">// error: `one` does not live long enough</span></code></pre></div>\n<p>대입한 값 <code class=\"language-text\">&amp;one</code>의 참조대상 <code class=\"language-text\">one</code>이 원하는 만큼 오래 살지 않는다는 오류 메시지가 뜬다.\n이렇게 '역시 매개변수 <code class=\"language-text\">x</code>에는 프로그램이 끝날 때까지 유효한 것만 대입할 수 있네'하고 오해하기 쉽다.</p>\n<p>위의 2가지 예에선 <code class=\"language-text\">&#39;static</code>이라는 똑같은 키워드가 쓰였지만, 사실 쓰인 장소를 다시 잘 보면 둘을 쉽게 구분할 수 있다.\n전자는 타입 표기에, 후자는 타입 매개변수의 제약 표기에 쓰였다.\n이름도 그에 따라 달라서 전자는 참조의 수명, 후자는 타입 매개변수의 <strong><em>수명제약</em></strong>(<strong><em>lifetime bound</em></strong>)이라고 한다.\n전자의 <code class=\"language-text\">&#39;static</code> 수명은 위에서 설명한 대로 프로그램이 끝날 때까지 유효한 참조라는 의미를 지니고 있다. 단순하고 이해하기 쉽다.\n후자의 <code class=\"language-text\">&#39;static</code> 수명제약은 조금 혼란의 여지가 있는데 아래에서 이에 대해 자세히 알아본다.</p>\n<h2>온전한 소유</h2>\n<p>정답을 미리 말하자면 <code class=\"language-text\">&lt;T: &#39;static&gt;</code>은 <code class=\"language-text\">T</code>에 <code class=\"language-text\">&#39;static</code> 수명제약을 붙여,\n<code class=\"language-text\">T</code>를 <strong>모든 참조의 수명이 <code class=\"language-text\">&#39;static</code>인 타입</strong>으로 제한한다.\n여기서 \"모든 참조\"란 자기 자신을 포함해 자신 안에 있는 모든 참조를 말한다.\n예를 들어 앞의 예제에서 설명한 <code class=\"language-text\">say</code> 함수의 매개변수에는 다음과 같이 <code class=\"language-text\">&#39;static</code> 수명의 참조를 인수로 대입할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> hello <span class=\"token operator\">=</span> <span class=\"token string\">\"안녕\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></code></pre></div>\n<p>참조가 하나뿐이고 그 수명이 <code class=\"language-text\">&#39;static</code>이기 때문이다.</p>\n<p>하지만, 앞서 봤듯이 수명이 <code class=\"language-text\">&#39;static</code>이 아닌 참조는 대입할 수 없었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> one <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: `one` does not live long enough</span></code></pre></div>\n<p>해당하는 참조는 하나뿐이지만, 그 수명이 <code class=\"language-text\">&#39;static</code>이 아니기 때문이다.</p>\n<p>\"모든 참조\"라고 했으니 참조가 아예 없는 경우는 어떨까?</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> s<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></code></pre></div>\n<p><code class=\"language-text\">s</code>는 문자열 슬라이스 참조(<code class=\"language-text\">&amp;str</code>)가 아닌 문자열(<code class=\"language-text\">String</code>)을 담고 있다.\n<code class=\"language-text\">&#39;static</code> 수명제약은 \"모든 참조의 수명이 <code class=\"language-text\">&#39;static</code>인 타입\"으로 제한하지만,\n애초에 <code class=\"language-text\">String</code>은 참조가 아닌 <strong>소유 타입(owned type)</strong><sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>이기 때문에\n<code class=\"language-text\">&#39;static</code> 수명제약이 걸린 타입의 매개변수에도 대입할 수 있다.\n<code class=\"language-text\">Vec</code>나 다른 소유 타입의 값들도 마찬가지다.</p>\n<p>그럼 참조를 포함하는 소유 타입은?</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> hello <span class=\"token operator\">=</span> <span class=\"token string\">\"안녕\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> one <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// struct S&lt;'a>(&amp;'static str, &amp;'a i32);</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: `one` does not live long enough</span></code></pre></div>\n<p><code class=\"language-text\">s</code> 자체는 소유 타입이고 그 안에는 참조가 2개 있다.\n첫 번째 참조의 수명은 <code class=\"language-text\">&#39;static</code>으로 문제가 없지만,\n두 번째 참조는 수명은 <code class=\"language-text\">&#39;static</code>이 아니기 때문에 컴파일에 실패한다.\n다시 말하면 위의 <code class=\"language-text\">s</code>는 온전히 소유하고 있지 않고 뭔가 외부에서 값을 빌리고 있기 때문이다.</p>\n<p>참조가 더 많은 경우에도 똑같은 원리가 적용된다.\n참조를 아무리 많이 포함하고 있어도 모두 <code class=\"language-text\">&#39;static</code> 수명이면 문제없이 <code class=\"language-text\">say</code> 함수에 대입할 수 있지만,\n단 하나라도 <code class=\"language-text\">&#39;static</code> 수명이 아닌 참조가 있다면 대입할 수 없게 된다.\n이렇게 <code class=\"language-text\">&#39;static</code> 수명제약을 이용하면 <code class=\"language-text\">&#39;static</code> 수명이 아닌 참조를 거를 수 있다.</p>\n<p>정리하면 어느 타입 매개변수 <code class=\"language-text\">T</code>에 <code class=\"language-text\">&#39;static</code> 수명제약을 가한다는 말은,\n<code class=\"language-text\">T</code>를 빌린(borrowed) 것을 가지고 있지 않은(가지고 있더라고 수명이 <code class=\"language-text\">&#39;static</code>인),\n<strong>온전히 소유(fully owned)할 수 있는 타입</strong>으로 제한하는 것이라고 말할 수 있다.\n또한 <code class=\"language-text\">Vec</code>나 <code class=\"language-text\">String</code> 같은 소유 타입은 프로그램 도중 언제든지 메모리에서 해제될 수 있기 때문에,\n<code class=\"language-text\">&#39;static</code> 수명이 의미하는 \"프로그램이 끝날 때까지 항상 유효한 참조\"라는 것은\n<code class=\"language-text\">&#39;static</code> 수명제약이 의미하는 바와 다르다는 것을 알 수 있다.</p>\n<p>그럼 이 온전히 소유한다는 의미가 어떨 때 유용하게 쓰일까?</p>\n<h2><code class=\"language-text\">&#39;static</code> 수명제약의 쓰임새</h2>\n<p>표준라이브러리에는 새로운 스레드를 생성하는\n<a href=\"https://doc.rust-lang.org/std/thread/fn.spawn.html\"><code class=\"language-text\">spawn</code></a>이라는 함수가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">spawn</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">:</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">JoinHandle</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">where</span>\n    <span class=\"token class-name\">F</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">FnOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">F</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>첫 번째 제약(<code class=\"language-text\">F: FnOnce() -&gt; T</code>)을 보면 유추할 수 있겠지만,\n<code class=\"language-text\">F</code>는 생성할 스레드의 로직을 담는 클로저이고 <code class=\"language-text\">T</code>는 그 반환 타입이다.\n그리고 그 아래에 타입 매개변수 <code class=\"language-text\">F</code>와 <code class=\"language-text\">T</code>에는 각각 <code class=\"language-text\">&#39;static</code> 수명제약이 가해져 있다.\n그렇다는 건 <code class=\"language-text\">F</code>와 <code class=\"language-text\">T</code>를 온전히 소유할 수 있는 타입으로 제한한다는 것이고,\n다른 말로 부모 스레드와 자식 스레드가 서로 주고받는 데이터 타입을 온전한 소유 타입으로 제한한다고 해석할 수 있다.\n즉, 온전히 소유할 수 있는 데이터만을 서로 주고받을 수 있게 된다.\n따라서 기본적으로 각 스레드는 다른 스레드의 데이터에 대한 참조를 가질 수 없고<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>,\n데이터들은 각각의 스레드별로 서로 독립되어 그 안에서만 사용된다.\n(스레드 사이에 공유할 필요가 있는 데이터는 다른 안전한 방법으로 공유할 수 있다.)</p>\n<p>실제 다음과 같은 코드는 컴파일되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> one <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: `one` does not live long enough</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>스레드를 생성한 부모 스레드와 그렇게 생성된 자식 스레드중에\n누가 먼저 일을 끝내고 종료될지 컴파일러는 알 수가 없다.\n따라서 참조하고 있는 값이 사용 도중에 메모리 해제되어 무효한 값이 되어버릴 수 있는 참조,\n즉 댕글링포인터(dangling pointer)가 될 가능성이 있는 참조는\n애초에 다른 스레드에 넘길 수 없도록 안전장치가 마련되어 있다.\n이렇게 Rust의 소유권 시스템은 <code class=\"language-text\">&#39;static</code> 수명제약이라는 안전장치로\n다른 스레드에서 쓰일 데이터에 대해서도 메모리 안정성을 보장한다.\n(그것도 컴파일 타임에!)</p>\n<p>만약 <code class=\"language-text\">&#39;static</code> 수명으로 착각해 프로그램이 끝날 때까지 유효한 데이터만 다른 스레드에 넘겨줄 수 있다고 잘못 이해하고 있다면,\n불필요한 메모리를 계속 점유하는 건 아니냐고 메모리 누수(memory leak)를 걱정할 수도 있다.\n하지만, 이미 알다시피 <code class=\"language-text\">&#39;static</code> 수명제약의 타입은 소유 타입의 값도 대입할 수 있고,\n이는 언제든지 필요하지 않을 땐 메모리에서 해제될 수 있다.</p>\n<h2>일반적인 수명제약</h2>\n<p>앞서 <code class=\"language-text\">&lt;T: &#39;static&gt;</code>는 <code class=\"language-text\">T</code>에 <code class=\"language-text\">&#39;static</code> 수명제약이 붙여 모든 참조의 수명이 <code class=\"language-text\">&#39;static</code>인 타입으로 제한한다고 했다.\n사실 좀 더 엄밀하게는 모든 참조의 수명이 <code class=\"language-text\">&#39;static</code> <strong>이상인</strong> 타입으로 제한한다고 보는 것이 낫다.\n원래 <code class=\"language-text\">&#39;static</code> 수명이 프로그램 전체 실행기간이라는 범위를 나타내니까\n수명의 길이가 <code class=\"language-text\">&#39;static</code> 이상이라는 말은 그냥 수명이 <code class=\"language-text\">&#39;static</code>이라는 말하고 같다.\n하지만 이렇게 이해하면 수명제약을 아래와 같이 <code class=\"language-text\">&#39;static</code>이 아닌 일반적인 수명제약으로 일반화해서 이해하기 쉽다.</p>\n<blockquote>\n<p><code class=\"language-text\">&lt;T: &#39;a&gt;</code>에서 <code class=\"language-text\">T</code>는 <strong>모든 참조의 수명의 길이가 <code class=\"language-text\">&#39;a</code> 이상인 타입</strong>으로 제한된다.</p>\n</blockquote>\n<p>그래서 이 경우 <code class=\"language-text\">T</code>의 매개변수에 수명이 <code class=\"language-text\">&#39;a</code>보다 짧은 참조가 있는 값은 대입할 수 없다.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\"><code class=\"language-text\">String</code> 값은 내부적으로 힙에 할당된 문자열을 가리키는 포인터를 가지고 있지만 외부적(논리적)으로는 소유하고 있다고 표현된다.\n이는 <a href=\"https://doc.rust-lang.org/std/marker/struct.PhantomData.html\"><code class=\"language-text\">PhantomData</code></a> 로 구현된다.<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-2\"><a href=\"https://github.com/crossbeam-rs/crossbeam\">crossbeam</a>의 Scoped Thread를 이용하면\n수명이 <code class=\"language-text\">&#39;static</code>이 아닌 참조를 다른 스레드에 넘길 수 있다.<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","frontmatter":{"title":"Rust static 수명의 2가지 의미","description":"Rust에서 'static 수명의 2가지 의미와 수명제약(lifetime bound)에 대해"}}},"pageContext":{"slug":"/Rust-static 수명의-2가지-의미"}},
    "staticQueryHashes": ["3649515864","63159454"]}