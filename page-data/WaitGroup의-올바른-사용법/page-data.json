{
    "componentChunkName": "component---src-templates-post-tsx",
    "path": "/WaitGroup의-올바른-사용법",
    "result": {"data":{"markdownRemark":{"html":"<h1><code class=\"language-text\">WaitGroup</code>의 올바른 사용법</h1>\n<p>간혹 여러 고루틴(goroutine)을 동시에 실행시키고, 이 고루틴들이 모두 종료될 때까지 기다리고 싶을 때가 있다.\n고루틴은 단순히 주어진 작업을 진행하고 끝나면 종료되는 하나의 루틴일 뿐이기에,\n이러한 추가 기능이 필요하면 따로 구현해야 한다.</p>\n<p><a href=\"https://pkg.go.dev/sync#WaitGroup\"><code class=\"language-text\">WaitGroup</code></a>은 바로 이런 기능을 아주 쉽게 구현할 수 있도록 도와준다.\n<code class=\"language-text\">WaitGroup</code>의 내부에선 기다릴 특정 고루틴의 개수를 저장하고 있다.\n기다리고 싶은 고루틴을 생성할 때마다 <code class=\"language-text\">WaitGroup</code>의 <a href=\"https://pkg.go.dev/sync#WaitGroup.Add\"><code class=\"language-text\">Add</code></a>메서드를 호출해서 기다릴 고루틴의 수를 늘리고,\n반대로 고루틴이 종료되면 <a href=\"https://pkg.go.dev/sync#WaitGroup.Done\"><code class=\"language-text\">Done</code></a>메서드를 호출해서 그 수를 줄이는 방식으로 사용한다.\n메인 고루틴에서는 <a href=\"https://pkg.go.dev/sync#WaitGroup.Wait\"><code class=\"language-text\">Wait</code></a>메서드를 호출해 모든 고루틴이 종료되어 내부의 대기 고루틴의 수가 0이 될 때까지 기다리게 할 수 있다.</p>\n<p>쉽고 간단한 방법이지만 병행 프로그래밍(concurrent programming)에서 실수하기 쉬워 주의가 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">wg <span class=\"token operator\">:=</span> sync<span class=\"token punctuation\">.</span>WaitGroup\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 대기 고루틴 수 1 증가</span>\n        <span class=\"token comment\">// 특정 작업을 진행...</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 대기 고루틴 수 1 감소</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nwg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 자식 고루틴 10개가 모두 종료될 때까지 대기</span></code></pre></div>\n<p>딱히 문제 될 게 없어 보인다.\n고루틴을 생성할 때마다 <code class=\"language-text\">WaitGroup</code>의 고루틴 대기 개수를 증가시키고 있고\n작업이 완료되면 알아서 개수를 감소시키도록 하고 있다.\n따라서 마지막의 <code class=\"language-text\">Wait</code>메서드는 10개의 고루틴이 모두 작업을 완료될 때까지 기다리다가(blocking)\n완료가 확인되면 그다음 작업을 진행할 것이다.</p>\n<p>하지만, 실제로는 그렇지 않을 때도 있다.\n사실 고루틴이 어떻게 스케쥴링될지는 실행할 때마다 다르기 때문에,\n생성된 고루틴들의 스케쥴링이 늦어질 경우 예상치 못한 결과를 얻을 수 있다.\n무슨 말인가 하면 예를 들어 위에서 고루틴이 10개 생성되고 고루틴 모두가 작업을 시작하기 전에,\n즉 모든 고루틴의 <code class=\"language-text\">wg.Add(1)</code>가 호출되기 전에 메인 고루틴이 마지막 라인(<code class=\"language-text\">Wait</code>호출 부분)에 도달할 수 있다는 것이다.\n아직 대기 개수가 증가(<code class=\"language-text\">Add</code>)되지 않아 초기값인 0인 그대로이고\n메인 고루틴은 '대기할 고루틴이 없구나'하고 자식 고루틴들을 기다리지 않고 바로 다음 작업을 진행해버리게 된다.</p>\n<p>이 문제를 해결하기 위해선, <strong>언제 스케쥴링돼서 실행될지 모를 고루틴안에서 대기 개수를 증가시키는 게 아니라\n해당 고루틴을 실행하기 직전에 증가</strong>시켜야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">wg <span class=\"token operator\">:=</span> sync<span class=\"token punctuation\">.</span>WaitGroup\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 대기 고루틴 수 1 증가</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 대기 고루틴 수 1 감소</span>\n\n        <span class=\"token comment\">// 특정 작업을 진행...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nwg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 자식 고루틴 10개가 완료될 때까지 대기</span></code></pre></div>\n<p>여기서 한 가지 더 눈여겨볼 점은 완료 시에 대기 고루틴 수를 감소시키는 코드로 <code class=\"language-text\">defer</code>를 이용했다는 것이다.\n이렇게 하면 고루틴이 마지막에 도달하기 전에 다른 조건으로 도중에 종료되더라도 대기 고루틴 수를 감소시킬 수 있다.</p>","frontmatter":{"title":"WaitGroup의 올바른 사용법","description":"Go의 WaitGroup을 사용할 때 쉽게 실수할 수 있는 부분과 올바른 사용법에 대해"}}},"pageContext":{"slug":"/WaitGroup의-올바른-사용법"}},
    "staticQueryHashes": ["3649515864","63159454"]}